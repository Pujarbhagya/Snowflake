--create warehouse
use warehouse SNOW_WH;

--create database
create database assgn3_db;

/* External Stage on S3:
a. Create User in AWS with Programmatic access and 
copy the credentials. 

b. Create s3 bucket

c. Create Stage: Use below SQL statement in Snowflake 
to create external stage on s3(AWS). */


--Create external stage
CREATE OR REPLACE STAGE assgn_stg
URL='s3://assgn3/json/'
CREDENTIALS=(AWS_KEY_ID='AKIA5FTY6GTTWYFH5MVC' AWS_SECRET_KEY='hVYcBCSm8e3M7EU7sRvgO7IhsraDLeaN4X3pIK3u');


--d. CREATE table in Snowflake with VARIANT column
CREATE OR REPLACE TABLE PERSON_NESTED (
    person VARIANT
);


--e. Create a Snowpipe with Auto Ingest Enabled
CREATE OR REPLACE PIPE person_pipe AUTO_INGEST = TRUE AS
COPY INTO PERSON_NESTED
FROM (
    SELECT 
    OBJECT_CONSTRUCT(
        'ID', $1,
        'Name', $2,
        'Age', $3,
        'Location', $4,
        'Zip', IFF($5 = '' OR $5 IS NULL, '00000', $5),
        'Filename', METADATA$FILENAME,
        'FileRowNumber', METADATA$FILE_ROW_NUMBER,
        'IngestedTimestamp', TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP)
    ) AS person
    FROM @assgn_stg
)
ON_ERROR = CONTINUE;

alter pipe person_pipe refresh;

show pipes;

--f. Subscribe the Snowflake SQS Queue in s3:

--g. Test Snowpipe by copying the sample JSON file and upload the file to s3 in path

select system$pipe_status('person_pipe');

show pipes;

SELECT *
FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(
    table_name => 'person_nested',
    start_time => DATEADD('hour', -24, CURRENT_TIMESTAMP())
));

select * from person_nested;

--Change Data Capture using Streams, Tasks and Merge

/* .Create Streams on PERSON_NESTED table to capture the 
change data on PERSON_NESTED table and use TASKS to Run 
SQL/Stored Procedure to Unnested the data from 
PERSON_NESTED and create PERSON_MASTER table. */

create or replace stream person_stream on table person_nested;

show streams;

--STEP 10. Create PERSON_MASTER Table:
CREATE OR REPLACE TABLE PERSON_MASTER (
    id STRING,
    name STRING,
    age NUMBER,
    address STRING);
	
	
	
 --create stored procedure   
CREATE OR REPLACE PROCEDURE update_person_master()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    MERGE INTO PERSON_MASTER AS target
    USING (
        SELECT
            VALUE:$1::VARCHAR AS ID,
            VALUE:$2::VARCHAR AS Name,
            VALUE:$3::INTEGER AS Age,
            VALUE:$4::VARCHAR AS Location,
            IFF(VALUE:$5::VARCHAR = '' OR VALUE:$5 IS NULL, '00000', VALUE:$5::VARCHAR) AS Zip,
            METADATA$FILENAME AS Filename,
            METADATA$FILE_ROW_NUMBER AS FileRowNumber,
            TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP) AS IngestedTimestamp
        FROM PERSON_NESTED,
        LATERAL FLATTEN(input => PERSON_NESTED.person) AS flattened
    ) AS source
    ON target.ID = source.ID
    WHEN MATCHED THEN
        UPDATE SET
            target.Name = source.Name,
            target.Age = source.Age,
            target.Location = source.Location,
            target.Zip = source.Zip,
            target.Filename = source.Filename,
            target.FileRowNumber = source.FileRowNumber,
            target.IngestedTimestamp = source.IngestedTimestamp
    WHEN NOT MATCHED THEN
        INSERT (ID, Name, Age, Location, Zip, Filename, FileRowNumber, IngestedTimestamp)
        VALUES (source.ID, source.Name, source.Age, source.Location, source.Zip, source.Filename, source.FileRowNumber, source.IngestedTimestamp);
    RETURN 'MERGE operation completed successfully';
END;
$$;






